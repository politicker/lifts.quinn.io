// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const get1RMHistory = `-- name: Get1RMHistory :many
select distinct on (logged_at) (weight * reps * 0.0333 + weight)::float AS estimated_1rm
from lift_set_log
where lower(exercise_name) = lower($1)
order by logged_at desc,
         estimated_1rm desc
LIMIT 11
`

func (q *Queries) Get1RMHistory(ctx context.Context, lower string) ([]float64, error) {
	rows, err := q.db.QueryContext(ctx, get1RMHistory, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []float64
	for rows.Next() {
		var estimated_1rm float64
		if err := rows.Scan(&estimated_1rm); err != nil {
			return nil, err
		}
		items = append(items, estimated_1rm)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBestSet = `-- name: GetBestSet :one
SELECT (round(weight)::text || ' x ' || reps::text) AS best_set
FROM lift_set_log
WHERE LOWER(exercise_name) = LOWER($1)
ORDER BY logged_at DESC,
         (weight * reps * 0.0333 + weight) DESC
LIMIT 1
`

func (q *Queries) GetBestSet(ctx context.Context, lower string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getBestSet, lower)
	var best_set interface{}
	err := row.Scan(&best_set)
	return best_set, err
}
